---
- name: copy systemd files to master
  template: src={{role_path}}/templates/{{item}} dest=/var/lib/yaml/
  with_items:
    - "cluster_objectsync_v1alpha1.yaml"
    - "objectsync_v1alpha1.yaml"
    - "devices_v1alpha1_device.yaml"
    - "devices_v1alpha1_devicemodel.yaml"
- name: kubectl create -f tiller
  shell: kubectl create -f /var/lib/yaml/{{item}}
  with_items:
    - "cluster_objectsync_v1alpha1.yaml"
    - "objectsync_v1alpha1.yaml"
    - "devices_v1alpha1_device.yaml"
    - "devices_v1alpha1_devicemodel.yaml"
  ignore_errors: yes

- name: unzip kubeedge-v1.3.1-linux-amd64.tar.gz
  unarchive: src={{role_path}}/../../pre-env/kubeedge-v1.3.1-linux-amd64.tar.gz dest=/opt
- name: create /etc/kubeedge/config
  file: path=/etc/kubeedge/config state=directory mode=755

- name: shell command opt/kubeedge-v1.3.1-linux-amd64/cloud/cloudcore/cloudcore  --minconfig >/etc/kubeedge/config/cloudcore.yaml
  shell: /opt/kubeedge-v1.3.1-linux-amd64/cloud/cloudcore/cloudcore  --minconfig >/etc/kubeedge/config/cloudcore.yaml

- name: copy kubeletes.sh
  template: src={{role_path}}/files/cloudcore.service dest=/usr/lib/systemd/system mode=755

- name: systemctl start cloudcore.service && systemctl start cloudcore.service
  shell: systemctl start cloudcore.service && systemctl enable cloudcore.service


#- name: get token
#  command: kubectl get secret tokensecret -n kubeedge -oyaml |grep tokendata|awk '{print $2}'|base64 -d
#  register: work_token

#- name: set facts token
#  set_fact: worker_join_token={{ work_token }}
